
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE IMPRIMIR LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE NUMERO PARDER PARIZQ POR PTCOMAinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMAdefinicion_instr   : NUMERO ID PTCOMAasignacion_instr   : ID IGUAL expresion_numerica PTCOMAmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'IF':([0,1,5,6,7,10,11,13,14,15,33,48,50,59,60,62,63,64,65,67,68,69,],[4,4,-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,4,4,-10,4,4,-13,-14,4,4,-15,]),'PARIZQ':([2,4,8,16,17,18,19,21,26,36,37,38,39,40,41,42,43,47,],[16,17,18,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MIENTRAS':([0,1,5,6,7,10,11,13,14,15,33,48,50,59,60,62,63,64,65,67,68,69,],[2,2,-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,2,2,-10,2,2,-13,-14,2,2,-15,]),'ENTERO':([16,17,18,19,21,26,36,37,38,39,40,41,42,43,47,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IGUAL':([9,],[19,]),'MAS':([23,24,25,27,30,32,34,44,49,51,52,53,54,55,56,57,58,],[37,-23,-24,-22,37,37,37,-20,-21,-19,-16,-17,37,37,37,-18,37,]),'DECIMAL':([16,17,18,19,21,26,36,37,38,39,40,41,42,43,47,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'LLAVIZQ':([35,45,66,],[50,59,67,]),'IGUALQUE':([23,24,25,27,44,49,51,52,53,57,],[39,-23,-24,-22,-20,-21,-19,-16,-17,-18,]),'MENOS':([16,17,18,19,21,23,24,25,26,27,30,32,34,36,37,38,39,40,41,42,43,44,47,49,51,52,53,54,55,56,57,58,],[26,26,26,26,26,38,-23,-24,26,-22,38,38,38,26,26,26,26,26,26,26,26,-20,26,-21,-19,-16,-17,38,38,38,-18,38,]),'DIVIDIDO':([23,24,25,27,30,32,34,44,49,51,52,53,54,55,56,57,58,],[36,-23,-24,-22,36,36,36,-20,-21,-19,36,36,36,36,36,-18,36,]),'LLAVDER':([5,6,7,10,11,13,14,15,33,48,60,62,63,64,65,68,69,],[-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,-10,64,65,-13,-14,69,-15,]),'ELSE':([65,],[66,]),'MAYQUE':([23,24,25,27,44,49,51,52,53,57,],[40,-23,-24,-22,-20,-21,-19,-16,-17,-18,]),'PTCOMA':([20,24,25,27,32,44,46,49,51,52,53,57,],[33,-23,-24,-22,48,-20,60,-21,-19,-16,-17,-18,]),'PARDER':([22,24,25,27,28,29,30,31,34,44,49,51,52,53,54,55,56,57,58,61,],[35,-23,-24,-22,45,46,-27,-26,49,-20,-21,-19,-16,-17,-30,-28,-31,-18,-29,-25,]),'IMPRIMIR':([0,1,5,6,7,10,11,13,14,15,33,48,50,59,60,62,63,64,65,67,68,69,],[8,8,-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,8,8,-10,8,8,-13,-14,8,8,-15,]),'CADENA':([18,47,],[31,31,]),'ID':([0,1,5,6,7,10,11,12,13,14,15,16,17,18,19,21,26,33,36,37,38,39,40,41,42,43,47,48,50,59,60,62,63,64,65,67,68,69,],[9,9,-9,-5,-7,-8,-4,20,-6,-3,-2,25,25,25,25,25,25,-11,25,25,25,25,25,25,25,25,25,-12,9,9,-10,9,9,-13,-14,9,9,-15,]),'CONCAT':([24,25,27,29,30,31,44,49,51,52,53,57,61,],[-23,-24,-22,47,-27,-26,-20,-21,-19,-16,-17,-18,-25,]),'NUMERO':([0,1,5,6,7,10,11,13,14,15,33,48,50,59,60,62,63,64,65,67,68,69,],[12,12,-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,12,12,-10,12,12,-13,-14,12,12,-15,]),'POR':([23,24,25,27,30,32,34,44,49,51,52,53,54,55,56,57,58,],[42,-23,-24,-22,42,42,42,-20,-21,-19,42,42,42,42,42,-18,42,]),'NIGUALQUE':([23,24,25,27,44,49,51,52,53,57,],[41,-23,-24,-22,-20,-21,-19,-16,-17,-18,]),'MENQUE':([23,24,25,27,44,49,51,52,53,57,],[43,-23,-24,-22,-20,-21,-19,-16,-17,-18,]),'$end':([1,3,5,6,7,10,11,13,14,15,33,48,60,64,65,69,],[-1,0,-9,-5,-7,-8,-4,-6,-3,-2,-11,-12,-10,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,50,59,67,],[1,62,63,68,]),'mientras_instr':([0,1,50,59,62,63,67,68,],[7,7,7,7,7,7,7,7,]),'init':([0,],[3,]),'expresion_cadena':([18,47,],[29,61,]),'expresion_logica':([16,17,],[22,28,]),'expresion_numerica':([16,17,18,19,21,26,36,37,38,39,40,41,42,43,47,],[23,23,30,32,34,44,51,52,53,54,55,56,57,58,30,]),'definicion_instr':([0,1,50,59,62,63,67,68,],[6,6,6,6,6,6,6,6,]),'if_instr':([0,1,50,59,62,63,67,68,],[10,10,10,10,10,10,10,10,]),'imprimir_instr':([0,1,50,59,62,63,67,68,],[11,11,11,11,11,11,11,11,]),'if_else_instr':([0,1,50,59,62,63,67,68,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,1,50,59,62,63,67,68,],[13,13,13,13,13,13,13,13,]),'instruccion':([0,1,50,59,62,63,67,68,],[14,15,14,14,15,15,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica.py',125),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica.py',129),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica.py',135),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','gramatica.py',139),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','gramatica.py',140),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','gramatica.py',141),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','gramatica.py',142),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','gramatica.py',143),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','gramatica.py',144),
  ('imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','gramatica.py',148),
  ('definicion_instr -> NUMERO ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','gramatica.py',152),
  ('asignacion_instr -> ID IGUAL expresion_numerica PTCOMA','asignacion_instr',4,'p_asignacion_instr','gramatica.py',156),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','gramatica.py',160),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','gramatica.py',164),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','gramatica.py',168),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',172),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',173),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',174),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',175),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','gramatica.py',182),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','gramatica.py',186),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','gramatica.py',190),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','gramatica.py',191),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','gramatica.py',195),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','gramatica.py',199),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','gramatica.py',203),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','gramatica.py',207),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',211),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',212),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',213),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',214),
]
